{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["updateStep","step","id","sort","userTrackNum","playlistName","imageUrl","tracksNum","uris","this","setState","App","state","filterString","bind","accessToken","queryString","parse","window","location","search","access_token","fetch","headers","then","response","json","data","userID","playlists","items","map","item","images","length","push","name","url","songsNum","tracks","total","playlistToRender","filter","playlist","toLowerCase","includes","className","i","key","onClick","href","Component","Step","props","PlaylistCards","src","alt","title","PareDown","inputValue","step2Fetch","changeSort","console","log","style","width","height","textAlign","fontWeight","fontSize","track","num","iValue","reverse","type","min","onChange","evt","updateInputValue","marginTop","max","document","getElementById","checked","target","value","toFixed","TrackCard","nextProps","opacity","ID","how","ResultsPreview","a","USER_TRACK_NUM","limit","offset","prevState","uri","img4","slice","album","reload","color","Results","success","method","body","JSON","stringify","status","backgroundColor","maxWidth","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.214da26a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport queryString from 'query-string';\n\n//function to change current step\nfunction updateStep({step, id, sort, userTrackNum, playlistName, imageUrl, tracksNum, uris}={}) {\n\t//console.log(arguments);\n\tthis.setState({ step, id, sort, userTrackNum, playlistName, imageUrl, tracksNum, uris})\n}\n\n//main component of pare down\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t  filterString: '',\n\t\t}\n\t\tupdateStep = updateStep.bind(this)\n\t}\n\n\t//send request to Spotify API to get all playlists that are public or private and display them in step 1\n\tcomponentDidMount() {\n\t\t//checking address bar for access token from Spotify API.\n\t\tlet parsed = queryString.parse(window.location.search);\n\t\tlet accessToken = parsed.access_token;\n\t\tif (!accessToken)\n\t\treturn;\n\n\t\t//getting user id, used by other requests to Spotify API\n\t\tfetch('https://api.spotify.com/v1/me', {\n\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({userID: data.id}))\n\t\t\n\t\tfetch(`https://api.spotify.com/v1/me/playlists`, {\n\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t})\n\t\t.then(response => response.json())\n\t\t//setting playlists state with response that is an array of playlists, and setting step state to 1\n\t\t.then(data => this.setState({\n\t\t\tplaylists: data.items.map(item => {\n\t\t\t\tif(item.images.length === 0){\n\t\t\t\t\titem.images.push('')\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tname: item.name,\n\t\t\t\t\timageUrl: item.images[0].url, \n\t\t\t\t\tsongsNum: item.tracks.total,\n\t\t\t\t\tid: item.id\n\t\t\t\t}\n\t\t\t}),\n\t\t\tstep: 1\n\t\t}))\n\t}\n\n\n\trender() {\n\t\t//function to map all playlists, then creating for every of one of them playlist-card that shows name, total number of songs in playlist and name of it.\n\t\t//console.log(this.state)\n\t\tlet playlistToRender = \n\t\tthis.state.playlists \n\t\t  ? this.state.playlists.filter(playlist => \n\t\t\tplaylist.name.toLowerCase().includes(\n\t\t\t  this.state.filterString.toLowerCase()),\n\t\t\t  )\n\t\t  : []\n\t\t\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1 className=\"app-name\">Pare Down for Spotify</h1>\n\t\t\t\t<h2 className=\"app-name__sub\">Create copy of your playlist pared down to number of songs you have chosen to.</h2>\n\t\t\t\n\t\t\t\t{/* displaying current step and text for it on top of site and proper component for this step */ }\n\t\t\t\t{/* \n\t\t\t\tif access token wasn't find - show button to login with Spotify, and on backend we use auth, where user grant pare down permission to access and/or modify the user’s own data - in this case: \n\t\t\t\t- Read and modify user private playlists.\n\t\t\t\t- Read and modify user public playlists.\n\t\t\t\t*/}\n\t\t\t\t<Step step={this.state.step}/>\n\t\t\t\t{\n\t\t\t\tthis.state.playlists && this.state.step === 1 ? \n\t\t\t\t\t<div className=\"playlist-grid\">\n\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\tplaylistToRender.map((playlist, i) => \n\t\t\t\t\t\t\t<PlaylistCards playlist={playlist} step={this.state.step} key={i} userID={this.state.userID}/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t:\n\t\t\t\tthis.state.playlists && this.state.step === 2 ?\n\t\t\t\t\t<PareDown id={this.state.id} userID={this.state.userID}/>\n\t\t\t\t:\n\t\t\t\tthis.state.playlists && this.state.step === 3 ?\n\t\t\t\t\t<ResultsPreview id={this.state.id}\n\t\t\t\t\t\tsort={this.state.sort} \n\t\t\t\t\t\tuserTrackNum={this.state.userTrackNum} \n\t\t\t\t\t\tuserID={this.state.userID} \n\t\t\t\t\t\tplaylistName={this.state.playlistName}\n\t\t\t\t\t\timageUrl={this.state.imageUrl}\n\t\t\t\t\t\ttracksNum={this.state.tracksNum}\n\t\t\t\t\t/>\n\t\t\t\t:\n\t\t\t\tthis.state.playlists && this.state.step === 4 ?\n\t\t\t\t\t<Results uris={this.state.uris} userID={this.state.userID} playlistName={this.state.playlistName}></Results>\n\t\t\t\t:\n\t\t\t\t<div className=\"btn\" onClick={() => {\n\t\t\t\t\twindow.location = window.location.href.includes('localhost') \n\t\t\t\t\t? 'http://localhost:8888/login' \n\t\t\t\t\t: 'https://pare-down-backend.herokuapp.com/login' \n\t\t\t\t\tthis.setState({step: 1})\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}>log in with spotify</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n//component to display proper message for current state\nclass Step extends Component {\n\trender() {\n\t\tif(this.props.step === 1){\n\t\t\treturn(\n\t\t\t\t<h3 className=\"step--header\">{this.props.step}. Select which playlist you would like to pare down: </h3>\n\t\t\t)\n\t\t}\n\t\telse if (this.props.step === 2) {\n\t\t\treturn(\n\t\t\t\t<h3 className=\"step--header\">{this.props.step}. Personalize playlist that will be created by pare down process: </h3>\n\t\t\t)\n\t\t}\n\t\telse if (this.props.step === 3) {\n\t\t\treturn(\n\t\t\t\t<h3 className=\"step--header\">{this.props.step}. Preview your pare down process: </h3>\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n//component used in step 1, displaying name, cover and total number of songs in all of playlists of current 'logged-in' user.\nclass PlaylistCards extends Component {\n\trender() {\n\t\tlet playlist = this.props.playlist\n\t\t//after user click on one of his playlists we set state with selected playlist id, and set step state to 2\n\t\treturn (\n\t\t\t<div className=\"playlist\" onClick={() => updateStep({step: 2, id: this.props.playlist.id})}>\n\t\t\t\t<p className=\"playlist__song-count\">Number of songs: {playlist.songsNum}</p>\n\t\t\t\t<div className=\"playlist__cover\">\n\t\t\t\t\t<img src={playlist.imageUrl} className=\"playlist__cover--img\" alt={playlist.name} title={playlist.name}/>\n\t\t\t\t</div>\n\t\t\t\t<p className=\"playlist__name\">{playlist.name}</p>\n\t\t \t </div>\n\t\t);\n\t  }\n}\n\n//main component for step 2\nclass PareDown extends Component {\n\tcomponentDidMount() {\n\t\tstep2Fetch();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconsole.log('a');\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinputValue: 0,\n\t\t}\n\t\tstep2Fetch =  step2Fetch.bind(this);\n\t\tchangeSort = changeSort.bind(this);\n\t}\n\n\trender() {\n\t\tconsole.log(this.state)\n\t\treturn(\n\t\t\t<div id=\"paredown\">\n\t\t\t\t<div id=\"paredown__left\">\n\t\t\t\t\t<div id=\"paredown__details\">\n\t\t\t\t\t\t{/* name of playlist and cover of it */}\n\t\t\t\t\t\t<img src={this.state.imageUrl} style={{width: '120px', height:'120px'}} alt={this.state.name} title={this.state.name}/>\n\t\t\t\t\t\t<h1>{this.state.name}</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"paredown__playlist\">\n\t\t\t\t\t\t<p style={{textAlign: 'center', fontWeight: 'bold', fontSize: 16}}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.tracksNum <= 100 ?\n\t\t\t\t\t\t\t\t<span>{this.state.tracksNum} latest songs from selected playlist:</span>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<span>100 latest songs from selected playlist:</span>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t{/* \n\t\t\t\t\t\tmapping tracks array, and reversing order of items inside it - if sort state is set to false.\n\t\t\t\t\t\tIf we wouldn't reverse them, tracks that are sorted by: 'recently added' are in wrong order.\n\t\t\t\t\t\t*/}\n\t\t\t\t\t\t{\t\n\t\t\t\t\t\tthis.state.tracks ?\n\t\t\t\t\t\t\tthis.state.sort == true ?\n\t\t\t\t\t\t\t\tthis.state.tracks.map((track, i) => \n\t\t\t\t\t\t\t\t<TrackCard track={track.track} key={i} num={i} iValue={this.state.inputValue}/>)\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\tthis.state.tracks.reverse().map((track, i) => \n\t\t\t\t\t\t\t\t<TrackCard track={track.track} key={i} num={i} iValue={this.state.inputValue}/>)\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<p>Sorry, couldn't find any songs in selected playlist. </p>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"paredown__right\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<p className=\"options__header\">Pare it down to/by...</p>\n\t\t\t\t\t\t\t<div style={{textAlign:'center'}}>\n\t\t\t\t\t\t\t\t{/* input to type how many songs we want to get from original playlist, needed in step 3 */}\n\t\t\t\t\t\t\t\t<input type=\"number\" min=\"0\" id=\"new-num\" onChange={evt => this.updateInputValue(evt, this.state.tracksNum)}/>\n\t\t\t\t\t\t\t\t{/* we can also toggle percents to select how many songs we want to get */}\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"percent--btn\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/* displaying (under input) how many songs there will be in new playlist after pare down */}\n\t\t\t\t\t\t\t<p id=\"new-num__show\">New playlist will have: {this.state.inputValue} songs.</p>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<p className=\"options__header\" style={{marginTop: 21}}>\n\t\t\t\t\t\t\t{/* option to sort songs by: 'recently added' OR 'first added to playlist\" */}\n\t\t\t\t\t\t\tAdd songs from selected playlist sorted by: \n\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"sort--btn\" onClick={() => changeSort()}/>\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t{/* button to pass all needed states, used by another component in step 3 - where pare down process is done behind scenes and result is displayed for user */}\n\t\t\t\t\t\t<div id=\"create--btn\" onClick={() => updateStep({step: 3, id: this.props.id, sort: this.state.sort, userTrackNum: this.state.inputValue, playlistName: this.state.name, imageUrl: this.state.imageUrl, tracksNum: this.state.tracksNum})}>Create new playlist</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t//function to set state with input value typed by user\n\tupdateInputValue(evt, max) {\n\t\tconst PERCENT = document.getElementById('percent--btn');\n\t\t//console.log(max);\n\t\t\n\t\t//checking if button for percents was clicked by user.\n\t\tif(!PERCENT.checked) {\n\t\t\t//if typed number by user is smaller than total number of songs in playlist, set state by using user input. If not set it to total number of songs in playlist\n\t\t\tif(evt.target.value <= max) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tinputValue: evt.target.value\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\tinputValue: max\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t//same as above but with percents\n\t\t\tif(evt.target.value <= 100){\n\t\t\t\tthis.setState({\n\t\t\t\t\tinputValue: ((max * evt.target.value)/100).toFixed(0)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\tinputValue: max\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\n//TrackCard component, used in step 2\nclass TrackCard extends Component {\n\t//without this, component re-renders itself on input value change (after sort-button was clicked)\n\t//so don't delete it :)\n\tshouldComponentUpdate(nextProps) {\n\t\tif(this.props.iValue !== nextProps.iValue) {\n\t\t\t return false\n\t\t}\n\t\treturn true\n\t}\n\t   \n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{/* Track Number (1-100) : Track Title*/}\n\t\t\t\t<p>{this.props.num + 1}. <span style={{opacity: '0.6'}}>{this.props.track.name}.</span></p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n//function with request to Spotify API, only used on step 2.\nfunction step2Fetch() {\n\tlet ID = this.props.id;\n\t//checking address bar for access token from Spotify API.\n\tlet parsed = queryString.parse(window.location.search);\n\tlet accessToken = parsed.access_token;\n\n\t//sending proper request to Spotify API with sort state in consideration.\n\tif(this.state.sort === true) {\n\t\t/*\n\t\tfor playlist sorted by: 'recently added' we send 2 requests to Spotify API: \n\t\t1) to get name, image of playlist and most important - how many songs there're total in this playlist,\n\t\t2) to get list of tracks, using offset atribute in Spotify API: total num of songs in playlist - 100. We substract 100 from it, because that's the maximum number of songs we can get in one request and we want all songs from this playlist starting (by using offset) on song that is on position of: total num of songs - 100.\n\n\t\tWe also check if there're less than 100 songs, if yes then we don't use offset attribute.\n\t\t*/\n\t\tfetch(`https://api.spotify.com/v1/users/${this.props.userID}/playlists/${ID}?fields=name,images,tracks.total`, {\n\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({\n\t\t\tname: data.name,\n\t\t\timageUrl: data.images.length === 0 ? data.images.push('') : data.images[0].url,\n\t\t\ttracksNum: data.tracks.total,\n\t\t\thow: fetch(`https://api.spotify.com/v1/users/${this.props.userID}/playlists/${ID}/tracks?offset=${data.tracks.total>100 ? data.tracks.total-100 : 0}`, {\n\t\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => this.setState({\n\t\t\t\ttracks: data.items,\n\t\t\t}))\n\t\t}))\n\t}else if (this.state.sort === false) {\n\t\t//for whatever reason Spotify API playlist request returns songs that were first added to playlist, we use this behaviour only when sort state is set to false.\n\t\tfetch(`https://api.spotify.com/v1/users/${this.props.userID}/playlists/${ID}`, {\n\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({\n\t\t\tname: data.name,\n\t\t\timageUrl: data.images.length === 0 ? data.images.push('') : data.images[0].url,\n\t\t\ttracksNum: data.tracks.total,\n\t\t\ttracks: data.tracks.items,\n\t\t}))\n\t}else if(!this.state.sort) {\n\t\t//on first render of component the sort state is not created yet. So we send request to Spotify API with tracks being sorted by recently added to playlist.\n\t\tfetch(`https://api.spotify.com/v1/users/${this.props.userID}/playlists/${ID}?fields=name,images,tracks.total`, {\n\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({\n\t\t\tname: data.name,\n\t\t\timageUrl: data.images.length === 0 ? data.images.push('') : data.images[0].url,\n\t\t\ttracksNum: data.tracks.total,\n\t\t\thow: \n\t\t\t\tfetch(`https://api.spotify.com/v1/users/${this.props.userID}/playlists/${ID}/tracks?offset=${data.tracks.total>100 ? data.tracks.total-100 : 0}`, {\n\t\t\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t\t\t})\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(data => this.setState({\n\t\t\t\t\ttracks: data.items,\n\t\t\t\t}))\t\n\t\t\t}))\n\t\t//setting new sort state, so on first sort-button click we'll get tracks sorted by: 'being first' added to playlist\n\t\tthis.setState({sort: false})\n\t}\n}\n\nfunction changeSort() {\n\t//used by sort-button, to change which tracks are displayed by TracksCard component (recently added to playlist or the ones that were first added to playlist)\n\tthis.setState({sort: !this.state.sort});\n\t//calling fetch function again, so proper request can be send to Spotify API to get tracks properly sorted by\n\tstep2Fetch();\n}\n\n//component used in step 3: preview of pare down process.\nclass ResultsPreview extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\turis: [],\n\t\t\ta: [],\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst USER_TRACK_NUM = this.props.userTrackNum;\n\t\tconst ID = this.props.id;\n\t\t//checking address bar for access token from Spotify API.\n\t\tlet parsed = queryString.parse(window.location.search);\n\t\tlet accessToken = parsed.access_token;\n\t\tif (!accessToken)\n\t\treturn;\n\n\t\t/*\n\t\t1) Making sure if user wants to have more than 0 songs in new playlist.\n\t\t2) With Spotify API we can only get 100 songs in one request - so, we send as many request as needed to have array with all uris to songs that number of was typed by user.playlist.\n\t\t3) As result of this we have arrays inside one main array that's stored in state: 'uris'.\n\t\t*/\n\t\tif(USER_TRACK_NUM > 0){\n\t\t\tif(this.props.sort === false) {\n\t\t\t\tfor(let i=0; i<USER_TRACK_NUM; i+=100){\n\t\t\t\t\tlet limit = 100;\n\t\t\t\t\tlet offset = this.props.tracksNum - (i + 100);\n\t\t\t\t\tif(USER_TRACK_NUM-i < 100) {\n\t\t\t\t\t\tlimit = USER_TRACK_NUM-i;\n\t\t\t\t\t\toffset = this.props.tracksNum - i - limit;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfetch(`https://api.spotify.com/v1/playlists/${ID}/tracks?fields=items(track(uri, album.images))&limit=${limit}&offset=${offset}`, {\n\t\t\t\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t\t\t\t})\n\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t//Apart from songs uris, we also create state 'img4' that stores links of covers of first 4 songs (in an array).\n\t\t\t\t\t.then(data => this.setState(prevState => ({\n\t\t\t\t\t\turis: [...prevState.uris, data.items.reverse().map((id) => id.track.uri)],\n\t\t\t\t\t\timg4: data.items.slice(0, 4).map((id) => id.track.album.images[1].url),\n\t\t\t\t\t})))\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(this.props.sort === true) {\n\t\t\t\tfor(let i=0; i<USER_TRACK_NUM; i+=100){\n\t\t\t\t\tlet limit = 100\n\t\t\t\t\tif(USER_TRACK_NUM-i < 100) {\n\t\t\t\t\t\tlimit = USER_TRACK_NUM-i;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfetch(`https://api.spotify.com/v1/playlists/${ID}/tracks?fields=items(track(uri, album.images))&limit=${limit}&offset=${i}`, {\n\t\t\t\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t\t\t\t})\n\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t//Apart from songs uris, we also create state 'img4' that stores links of covers of first 4 songs (in an array).\n\t\t\t\t\t.then(data => this.setState(prevState => ({\n\t\t\t\t\t\turis: [...prevState.uris, data.items.map((id) => id.track.uri)],\n\t\t\t\t\t\timg4: data.items.slice(0, 4).map((id) => id.track.album.images[1].url),\n\t\t\t\t\t})))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconsole.log(this.state)\n\t\tconst USER_TRACK_NUM = this.props.userTrackNum;\n\t\treturn (\n\t\t\t<div>\n\t\t\t{\t\n\t\t\t\t//displaying error if user selected 0 or less songs in previous step\n\t\t\t\tUSER_TRACK_NUM === 0 ?\n\t\t\t\t//by clicking error message: reload whole page, because when setting step state to '1' console starts to throw error \"Can't perform a React state update on an unmounted component.\"\n\t\t\t\t<p id=\"creation-error\"onClick={() => window.location.reload()}>Sorry, but you choose wrong number of songs in <span style={{color: '#fff'}}>step 2</span>. Click on this text to go back to playlist selection page.</p>\n\t\t\t\t:\n\t\t\t\t/*\n\t\t\t\tpreview of pare down process: \n\t\t\t\t- on left original playlist (with cover, title of it and num of songs)\n\t\t\t\tand between of these two are buttons: create(setting step to 4) and cancel(setting step to 1);\n\t\t\t\t- on right playlist after pare down (with cover, title of it and num songs)\n\t\t\t\t*/\n\t\t\t\t<div id=\"preview-box\">\n\t\t\t\t\t<div id=\"preview-selected\">\n\t\t\t\t\t\t<p className=\"preview-header\">SELECTED PLAYLIST:</p>\n\t\t\t\t\t\t<img src={this.props.imageUrl} className=\"preview-selected-img\" alt={this.props.playlistName} title={this.props.playlistName}/>\n\t\t\t\t\t\t<p className=\"preview-name\">Name: <span style={{opacity: 0.5}}>{this.props.playlistName}</span></p>\n\t\t\t\t\t\t<p className=\"preview-num\">Num of songs: <span style={{opacity: 0.5}}>{this.props.tracksNum}</span></p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div id=\"preview-btns\">\n\t\t\t\t\t\t<div id=\"preview-btn--create\" className=\"preview-btn\" onClick={() => updateStep({step: 4, uris: this.state.uris, playlistName: this.props.playlistName})}>Create</div>\n\t\t\t\t\t\t<div id=\"preview-btn--cancel\" className=\"preview-btn\" onClick={() => updateStep({step: 1})}>Cancel</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div id=\"preview-pared\">\n\t\t\t\t\t\t<p className=\"preview-header\">AFTER PARE DOWN:</p>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.img4 ?\n\t\t\t\t\t\t\t\tthis.state.img4.length < 4 ?\n\t\t\t\t\t\t\t\t<img src={this.state.img4[0]} className=\"preview-pared-img--big\" alt={this.props.playlistName + 'Pared Down'} title={this.props.playlistName + 'Pared Down'} />\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div id=\"preview-pared-img-box\">\n\t\t\t\t\t\t\t\t\t<img src={this.state.img4[2]} className=\"preview-pared-img\" alt={this.props.playlistName + 'Pared Down'} title={this.props.playlistName + 'Pared Down'} />\n\t\t\t\t\t\t\t\t\t<img src={this.state.img4[0]} className=\"preview-pared-img\" alt={this.props.playlistName + 'Pared Down'} title={this.props.playlistName + 'Pared Down'} />\n\t\t\t\t\t\t\t\t\t<img src={this.state.img4[3]} className=\"preview-pared-img\" alt={this.props.playlistName + 'Pared Down'} title={this.props.playlistName + 'Pared Down'} />\n\t\t\t\t\t\t\t\t\t<img src={this.state.img4[1]} className=\"preview-pared-img\" alt={this.props.playlistName + 'Pared Down'} title={this.props.playlistName + 'Pared Down'} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<p className=\"preview-name\">Name: <span style={{opacity: 0.5}}>{this.props.playlistName} - Pared Down</span></p>\n\t\t\t\t\t\t<p className=\"preview-num\">Num of songs: <span style={{opacity: 0.5}}>{USER_TRACK_NUM}</span></p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Results extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsuccess: null\n\t\t}\n\t}\n\t\n\tcomponentDidMount() {\n\t\tlet uris = this.props.uris;\n\t\t//checking address bar for access token from Spotify API.\n\t\tlet parsed = queryString.parse(window.location.search);\n\t\tlet accessToken = parsed.access_token;\n\t\tif (!accessToken)\n\t\treturn;\n\t\t//creating new playlist\n\t\tfetch(`https://api.spotify.com/v1/users/${this.props.userID}/playlists`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({\n\t\t\t\t\"name\": this.props.playlistName + ' - Pared Down',\n\t\t\t}),\n\t\t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t\t})\n\t\t.then(response => response.json())\n\t\t//adding \"selected\" songs by user to this freshly created playlist. \n\t\t//Spotify API allow only to add max 100 songs per request. 'uris' state stores X ammount of arrays inside it - by looping it we can send proper ammount of requests to add all songs that we need.\n\t\t.then((data) => {\n\t\t\tfor(let i=0; i<uris.length; i++){\n\t\t\t\tfetch(`https://api.spotify.com/v1/playlists/${data.id}/tracks`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\"uris\": this.props.uris[i]\n\t\t\t\t}),\n\t\t\t\theaders: {'Authorization': 'Bearer ' + accessToken, 'Content-Type': 'application/json'}\n\t\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif(response.status === 201){\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tsuccess: 'Playlist was created!'\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\trender() {\n\t\treturn (\n\t\t\tthis.state.success ? \n\t\t\t<div>\n\t\t\t\t<p className=\"step--header\">{this.state.success}</p>\n\t\t\t\t{\n\t\t\t\t/*btn to pare down another playlist. We reload whole page, because when we try to set step state to '1' console throws error about \"Can't perform a React state update on an unmounted component.\"*/\n\t\t\t\t}\n\t\t\t\t<div onClick={() => window.location.reload()} className=\"btn\" style={{backgroundColor: '#333', marginTop: 0, maxWidth: 270}}>Pare down another playlist</div>\n\t\t\t</div>\n\t\t\t: null\n\t\t)\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}